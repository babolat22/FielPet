package vistas;

import entidades.Mascota;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import persistencia.MascotaData;
import persistencia.miConexion;

/**
 *
 * @author juanj
 */
public final class ListarView extends javax.swing.JInternalFrame {
    ArrayList<Mascota> lista;
    private miConexion conecto;
    
    private DefaultTableModel modelo= new DefaultTableModel(){
        public boolean isCellEditable(int fila,int col){
           return false;
        }
    };
    
    public ListarView() {
        initComponents();
        conecto = new miConexion("jdbc:mysql://localhost/fielpet", "root", "");
        armaCabeceraTabla();
       
        cargaTabla();
    }
    public void armaCabeceraTabla(){
      //Titulos de Columnas
        ArrayList<Object> columnas=new ArrayList<Object>();
        columnas.add("Id");
        columnas.add("Apodo");
        columnas.add("Raza");
        columnas.add("sexo");
        columnas.add("Act");
        columnas.add("Observaciones");
    
        
        for(Object it:columnas){
           modelo.addColumn(it);
        }
        tabMascotas.setModel(modelo);
        tabMascotas.getColumn("Id").setPreferredWidth(6);
        tabMascotas.getColumn("Id").setMaxWidth(20);
        tabMascotas.getColumn("sexo").setPreferredWidth(6);
        tabMascotas.getColumn("sexo").setMaxWidth(20);
        tabMascotas.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); 
    }
    public void borraFilasTabla(){
         int a =modelo.getRowCount()-1;
            for(int i=a;i>=0;i--){
                modelo.removeRow(i );
            }
      }
   
    public void cargaTabla(){
        borraFilasTabla();                            // 1- limpiar tabla
        MascotaData mdata =new MascotaData(conecto);    
        lista = (ArrayList)mdata.listarMascotas();    // 2- Me conecto
        for(Mascota pet: lista){     // 3- Llenar filas
            //Comparo por los id o sobreescribo el método equals en Materias
             modelo.addRow(new Object[]{pet.getId(),pet.getApodo(),pet.getRaza(),pet.getSexo(),pet.getActivo(), pet.getObs()});
        }       
}
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabMascotas = new javax.swing.JTable();
        jbtSalida = new javax.swing.JButton();
        jbtVolver = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Mostrar Mascotas en estudio");

        tabMascotas.setAutoCreateRowSorter(true);
        tabMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "cod", "Apodo", "Raza", "Sexo", "Act", "Observaciones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabMascotas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tabMascotas.setColumnSelectionAllowed(true);
        tabMascotas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabMascotas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tabMascotasFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(tabMascotas);
        tabMascotas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tabMascotas.getColumnModel().getColumnCount() > 0) {
            tabMascotas.getColumnModel().getColumn(0).setPreferredWidth(5);
            tabMascotas.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        jbtSalida.setText("Salida");
        jbtSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSalidaActionPerformed(evt);
            }
        });

        jbtVolver.setText("Volver");
        jbtVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jbtSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(jbtVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 824, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtSalida)
                    .addComponent(jbtVolver))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSalidaActionPerformed
        // TODO add your handling code here:
        int i = JOptionPane.showConfirmDialog(this,"¿Realmente Desea Salir del programa?","Confirmar Salida",JOptionPane.WARNING_MESSAGE);
        System.out.println("i"+i);
        if (i==0) System.exit(0);

    }//GEN-LAST:event_jbtSalidaActionPerformed

    private void jbtVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtVolverActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jbtVolverActionPerformed

    private void tabMascotasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabMascotasFocusGained
          cargaTabla();
    }//GEN-LAST:event_tabMascotasFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtSalida;
    private javax.swing.JButton jbtVolver;
    private javax.swing.JTable tabMascotas;
    // End of variables declaration//GEN-END:variables
}
